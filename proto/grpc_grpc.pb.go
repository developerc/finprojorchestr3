// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/grpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrchServerServiceClient is the client API for OrchServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrchServerServiceClient interface {
	// методы, которые можно будет реализовать и использовать
	RegisterNewAgent(ctx context.Context, in *AgentParams, opts ...grpc.CallOption) (*AgentParamsResponse, error)
	SendTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	HBreq(ctx context.Context, in *HeartBit, opts ...grpc.CallOption) (*HeartBitResp, error)
	PullFinishTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	PushFinishTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
}

type orchServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchServerServiceClient(cc grpc.ClientConnInterface) OrchServerServiceClient {
	return &orchServerServiceClient{cc}
}

func (c *orchServerServiceClient) RegisterNewAgent(ctx context.Context, in *AgentParams, opts ...grpc.CallOption) (*AgentParamsResponse, error) {
	out := new(AgentParamsResponse)
	err := c.cc.Invoke(ctx, "/finproj.OrchServerService/RegisterNewAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchServerServiceClient) SendTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/finproj.OrchServerService/SendTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchServerServiceClient) HBreq(ctx context.Context, in *HeartBit, opts ...grpc.CallOption) (*HeartBitResp, error) {
	out := new(HeartBitResp)
	err := c.cc.Invoke(ctx, "/finproj.OrchServerService/HBreq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchServerServiceClient) PullFinishTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/finproj.OrchServerService/PullFinishTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchServerServiceClient) PushFinishTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/finproj.OrchServerService/PushFinishTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchServerServiceServer is the server API for OrchServerService service.
// All implementations must embed UnimplementedOrchServerServiceServer
// for forward compatibility
type OrchServerServiceServer interface {
	// методы, которые можно будет реализовать и использовать
	RegisterNewAgent(context.Context, *AgentParams) (*AgentParamsResponse, error)
	SendTask(context.Context, *Task) (*Task, error)
	HBreq(context.Context, *HeartBit) (*HeartBitResp, error)
	PullFinishTask(context.Context, *Task) (*Task, error)
	PushFinishTask(context.Context, *Task) (*Task, error)
	mustEmbedUnimplementedOrchServerServiceServer()
}

// UnimplementedOrchServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrchServerServiceServer struct {
}

func (UnimplementedOrchServerServiceServer) RegisterNewAgent(context.Context, *AgentParams) (*AgentParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewAgent not implemented")
}
func (UnimplementedOrchServerServiceServer) SendTask(context.Context, *Task) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTask not implemented")
}
func (UnimplementedOrchServerServiceServer) HBreq(context.Context, *HeartBit) (*HeartBitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HBreq not implemented")
}
func (UnimplementedOrchServerServiceServer) PullFinishTask(context.Context, *Task) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullFinishTask not implemented")
}
func (UnimplementedOrchServerServiceServer) PushFinishTask(context.Context, *Task) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushFinishTask not implemented")
}
func (UnimplementedOrchServerServiceServer) mustEmbedUnimplementedOrchServerServiceServer() {}

// UnsafeOrchServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchServerServiceServer will
// result in compilation errors.
type UnsafeOrchServerServiceServer interface {
	mustEmbedUnimplementedOrchServerServiceServer()
}

func RegisterOrchServerServiceServer(s grpc.ServiceRegistrar, srv OrchServerServiceServer) {
	s.RegisterService(&OrchServerService_ServiceDesc, srv)
}

func _OrchServerService_RegisterNewAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchServerServiceServer).RegisterNewAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finproj.OrchServerService/RegisterNewAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchServerServiceServer).RegisterNewAgent(ctx, req.(*AgentParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchServerService_SendTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchServerServiceServer).SendTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finproj.OrchServerService/SendTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchServerServiceServer).SendTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchServerService_HBreq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchServerServiceServer).HBreq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finproj.OrchServerService/HBreq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchServerServiceServer).HBreq(ctx, req.(*HeartBit))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchServerService_PullFinishTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchServerServiceServer).PullFinishTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finproj.OrchServerService/PullFinishTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchServerServiceServer).PullFinishTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchServerService_PushFinishTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchServerServiceServer).PushFinishTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finproj.OrchServerService/PushFinishTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchServerServiceServer).PushFinishTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

// OrchServerService_ServiceDesc is the grpc.ServiceDesc for OrchServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrchServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finproj.OrchServerService",
	HandlerType: (*OrchServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNewAgent",
			Handler:    _OrchServerService_RegisterNewAgent_Handler,
		},
		{
			MethodName: "SendTask",
			Handler:    _OrchServerService_SendTask_Handler,
		},
		{
			MethodName: "HBreq",
			Handler:    _OrchServerService_HBreq_Handler,
		},
		{
			MethodName: "PullFinishTask",
			Handler:    _OrchServerService_PullFinishTask_Handler,
		},
		{
			MethodName: "PushFinishTask",
			Handler:    _OrchServerService_PushFinishTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpc.proto",
}
